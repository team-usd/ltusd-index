type TotalSupply @entity(immutable: true) {
  id: Bytes!
  value: BigInt! 
  blockNumber: BigInt!
  blockTimestamp: BigInt!
}

# type TotalTransfer @entity {
#   id: ID!
#   totalCount: BigInt! 
#   totalVolume: BigInt!
#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
# }

# Token details
type Token @entity {
  id: ID!
  #token name
  name: String!
  #token symbol
  symbol: String!
  #decimals used
  decimals: BigInt!
}

# account details
#type Account @entity {
#  #account address
#  id: ID!
#  #balances
#  balances: [TokenBalance!]! @derivedFrom(field: "account")
#}
# token balance details
#type TokenBalance @entity {
#  id: ID!
#  #token
#  token: Token!
#  #account
#  account: Account!
#  #amount
#  amount: BigInt!
#}

type Account @entity {
  #account address
  id: ID!
  #balance
  amount: BigInt!
  #last updated block number
  inTx: Int!
  outTx: Int!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
}

enum TransferType {
  NORMAL
  MINT
  BURN
}

type Transfer @entity(timeseries: true) {
  id: Int8! 
  timestamp: Timestamp!
  from: Bytes! # address
  to: Bytes! # address
  type: TransferType!
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TransferStats @aggregation(intervals: ["hour", "day"], source: "Transfer") {
  id: Int8!
  timestamp: Timestamp!
  type: TransferType!
  volume: BigInt! @aggregate(fn: "sum", arg: "value")
  count: Int! @aggregate(fn: "count")
  total_volume: BigInt! @aggregate(fn: "sum", arg: "value", cumulative: true)
  total_count: Int! @aggregate(fn: "count", cumulative: true)
}

type Role @entity {
    id: ID!
    roleName: String! 
    address: Bytes! # address
    enabled: Boolean!
}

type Black @entity {
  id: ID!
  enabled: Boolean!
}